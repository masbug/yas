
// Copyright (c) 2010-2023 niXman (github dot nixman at pm dot me). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef __yas__detail__tools__tuple_element_switch_hpp
#define __yas__detail__tools__tuple_element_switch_hpp

#include <yas/detail/config/config.hpp>
#include <yas/detail/type_traits/type_traits.hpp>
#include <utility>

namespace yas {
namespace detail {

/***************************************************************************/

template<typename Archive, typename ...Ts, std::size_t ...Is>
void tuple_switch_impl(Archive &ar, std::size_t idx, std::tuple<Ts...>& t, std::index_sequence<Is...>)
{
    ((void)(Is == idx && (ar & std::get<Is>(t), true)), ...);
}

template<typename Archive>
void tuple_switch(Archive &, std::size_t, std::tuple<> &) {}

template<typename Archive, typename ...Ts>
void tuple_switch(Archive &ar, std::size_t idx, std::tuple<Ts...>& t)
{
    tuple_switch_impl(ar, idx, t, std::make_index_sequence<sizeof...(Ts)>{});
}


/***************************************************************************/

} // ns detail
} // ns yas

#endif // __yas__detail__tools__tuple_element_switch_hpp
